{
	"name": "dataflow_summary",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "db_nycpayroll2020",
						"type": "DatasetReference"
					},
					"name": "dbnycpayroll2020"
				},
				{
					"dataset": {
						"referenceName": "db_nycpayroll2021",
						"type": "DatasetReference"
					},
					"name": "dbnycpayroll2021"
				}
			],
			"sinks": [
				{
					"name": "sink",
					"rejectedDataLinkedService": {
						"referenceName": "ls_azdatalakestorage",
						"type": "LinkedServiceReference"
					}
				},
				{
					"linkedService": {
						"referenceName": "ls_azdatalakestorage",
						"type": "LinkedServiceReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "ls_azdatalakestorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "union"
				},
				{
					"name": "filterfiscalyear",
					"description": "Add expresdataflow_param_fiscalyearsion for the filter"
				},
				{
					"name": "Totalpaid"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     dataflow_param_fiscalyear as integer (2020)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dbnycpayroll2020",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyCode as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dbnycpayroll2021",
				"dbnycpayroll2020, dbnycpayroll2021 union(byName: true)~> union",
				"union filter(toInteger(FiscalYear) >= $dataflow_param_fiscalyear) ~> filterfiscalyear",
				"filterfiscalyear derive(TotalPaid = RegularGrossPaid+TotalOTPaid+TotalOtherPay) ~> Totalpaid",
				"Totalpaid aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(TotalPaid)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     preCommands: [],",
				"     postCommands: []) ~> sink",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'adlsnycpayroll-kelsey-z',",
				"     folderPath: 'dirstaging',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}